# Import necessary modules
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']  # External styler, can change but don't need to
restaurant_name = 'Sandy'  # restaurant name to be posted
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)  # set up the application
app.title = str(restaurant_name + ' Dashboard')  # Set Tab title

# https://www.tasteofhome.com/collection/easy-mixed-drinks/
# Create a few dataframes for experimenting, will need to make this sql for launch
order_df = pd.DataFrame({
    'order_id': ['00001', '00002', '00003', '00004', '00005', '00006', '00007', '00008', '00009'],
    'drink_name': ['Red Sangria', 'French 75', 'French 75', 'French 75', 'Chocolate Martini', 'Moscow Mule',
                   'Chocolate Martini',
                   'Spiked Lemonade', 'Bloody Mary'],
    'drink_price': [12, 11, 11, 13, 11, 10, 11, 8, 10],
    'order_date': ['1/1/2021', '1/1/2021', '1/1/2021', '1/1/2021', '1/15/2021', '1/31/2021', '2/1/2021', '2/15/2021',
                   '2/29/2021']
})
completed_orders_df = pd.DataFrame({
    'order_id': ['00001', '00002', '00003', '00004', '00005', '00006', '00007', '00008', '00009'],
    'bartender_name': ['Derek', 'Derek', 'Lisa', 'Tapan', 'Derek', 'Derek', 'Lisa', 'Tapan', 'Lisa']
})
# Unnecessary dataframe, will be removed
lag_time_orders = pd.read_csv('Book1.csv')

join_df = pd.merge(order_df, completed_orders_df)  # Join dfs so I can get bartender profit

# A range slider does not work with dates only numbers, so we create a list of the unique dates so we have numbers
range_slider_number_date = [x for x in range(len(order_df['order_date'].unique()))]
# A dictionary that displays the date to the number generated above
range_slider_dict = {number_date: date for number_date, date in
                     zip(range_slider_number_date, order_df['order_date'].unique())}

"""
Dropdown Options List follow this format:
[{'label': 'New York City', 'value': 'NYC'},
{'label': 'Montreal', 'value': 'MTL'},
{'label': 'San Francisco', 'value': 'SF'}]
"""
# List comprehension for drink & bartender dropdown options. The label & value are the same & we drop duplicates
drinks_options_dict = [{'label': i['drink_name'], 'value': i['drink_name']} for
                       i in order_df.drop_duplicates('drink_name').to_dict('records')]
bartender_options_dict = [{'label': i['bartender_name'], 'value': i['bartender_name']} for i in
                          completed_orders_df.drop_duplicates('bartender_name').to_dict('records')]

# Timeline stacked bar graph of drink revenue based on the date, joined dataframe for callback by bartender
revenue_timeline_fig = px.bar(join_df, x='order_date', y='drink_price', color='drink_name', title='Revenue',
                              labels=dict(order_date='Order Date', drink_price='Revenue', drink_name='Drink Type'))
revenue_timeline_fig.update_xaxes(rangeslider_visible=False)  # We have the code, but this places a slider
revenue_timeline_fig.update_layout(transition_duration=500)  # Responsiveness of the slider

# Pie graph of the contribution of the specific drink to the total revenue, joined dataframe for callback by bartender
order_pie_fig = px.pie(join_df, values='drink_price', names='drink_name', title='Drink Contribution to Revenue')

# Stack line graph that shows the amount of revenue generated by each bartender, joined dataframe for callback by drink
bartender_revenue_fig = px.area(join_df, x='order_date', y='drink_price', color='bartender_name',
                                title='Bartender Completed Orders',
                                labels=dict(order_date='Order Date', drink_price='Revenue', bartender_name='Bartender'))
bartender_order_completion_fig = px.histogram(lag_time_orders, x='order_lag_time', color='bartender_name',
                                              histnorm='probability density', marginal='violin',
                                              title='Bartender Order Completion Time',
                                              labels=dict(bartender_name='Bartender',
                                                          order_lag_time='Time Lag (minutes)',
                                                          probability_density='a'))  # Can some try to fix this?

# layout the application, each div has children
app.layout = html.Div(children=[
    html.H1(children=restaurant_name),  # Display the restaurant names in H1 markdown

    # Date Range slider
    html.Div(children=[
        dcc.RangeSlider(id='date-range-slider',  # id for callback
                        min=range_slider_number_date[0],  # the first date
                        max=range_slider_number_date[-1],  # the last date
                        value=[range_slider_number_date[0], range_slider_number_date[-1]],  # From first to last
                        marks=range_slider_dict)
    ]),

    # Drinks dropdown menu for callback
    html.Div(children=
             dcc.Dropdown(id='drinks-dropdown',  # id for callback
                          options=drinks_options_dict,  # List dictionary for options
                          multi=True,  # Enable multiple selection
                          value=order_df['drink_name'].unique(),  # All the unique instances in the df for first load
                          placeholder='Filter by drink',  # Prompt
                          style={'padding': '5px 10px'})  # Layout padding for good spacing
             ),

    # Bartender dropdown menu for callback
    html.Div(children=
             dcc.Dropdown(id='bartender-dropdown',  # id for callback
                          options=bartender_options_dict,
                          multi=True,  # Enable multiple selection
                          # All the unique instances in the df for first load
                          value=completed_orders_df['bartender_name'].unique(),
                          placeholder='Filter by bartender',  # Prompt
                          style={'padding': '5px 10px'})  # Layout padding for good spacing
             ),

    # Date Aggregator menu for callback
    html.Div(children=
             dcc.Dropdown(id='date_aggregate-dropdown',  # id for callback
                          options=[
                              {'label': 'Hours', 'value': 'hour'},
                              {'label': 'Days', 'value': 'day'},
                              {'label': 'Weeks', 'value': 'week'},
                              {'label': 'Months', 'value': 'month'},
                              {'label': 'Quarters', 'value': 'quarter'}],
                          multi=False,  # Disable multiple selection
                          placeholder='Aggregate Time Series',  # Prompt
                          style={'padding': '5px 10px'})  # Layout padding for good spacing
             ),

    # The revenue generated by drink time-series & revenue contribution pie graph div. These will be on the same line
    html.Div(children=[
        dcc.Graph(id='revenue-timeline-fig',  # id for callback
                  figure=revenue_timeline_fig,  # See figure above
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'}),  # Layout styling
        dcc.Graph(id='order-pie-fig',  # id for callback
                  figure=order_pie_fig,  # See figure above
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'})  # Layout styling
    ]),

    # Stacked line graph of bartender revenue
    html.Div(children=[
        dcc.Graph(id='bartender-revenue-fig',  # id for callback
                  figure=bartender_revenue_fig,  # See figure above
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'}),  # Layout styling
        dcc.Graph(id='bartender-order-completion-fig', figure=bartender_order_completion_fig,
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'})
    ])
])


# Callbacks are order sensitive, the order matters when inputting parameters into the output function
@app.callback(
    Output('revenue-timeline-fig', 'figure'),  # First return from function is the revenue timeline
    Output('order-pie-fig', 'figure'),  # Second return from function is the order pie figure
    Output('bartender-revenue-fig', 'figure'),  # Third return from function is the bartender revenue figure
    # We convert these inputs to lists because they are multi input options, if was a single it doesn't need to be list
    [Input('date-range-slider', 'value')],  # First parameter into function is the date range slider
    [Input('drinks-dropdown', 'value')],  # Second parameter into function is the drinks dropdown
    [Input('bartender-dropdown', 'value')]  # Third parameter into function is the bartender dropdown
)
def update_figures(range_slider, drinks_dropdown, bartender_dropdown):
    # Filter date in between the range slider. The range slider will return the integers corresponding to the date
    # markers. We will use the range slider dictionary to look up the integer key, & pass the first date, then
    # second date
    callback_df = order_df[(order_df['order_date'] >= range_slider_dict[range_slider[0]]) &
                           (order_df['order_date'] <= range_slider_dict[range_slider[1]])]
    callback_df = callback_df[callback_df['drink_name'].isin(drinks_dropdown)]  # Filter by drink names

    # Filter by bartender names
    completed_orders_callback_df = completed_orders_df[completed_orders_df['bartender_name'].isin(bartender_dropdown)]
    join_callback_df = pd.merge(callback_df, completed_orders_callback_df)  # Join dfs so I can create dynamic figures

    # Recreate Revenue timeline figure based on callback
    revenue_timeline_callback_fig = px.bar(join_callback_df, x='order_date', y='drink_price', color='drink_name',
                                           title='Revenue', labels=dict(order_date='Order Date', drink_price='Revenue',
                                                                        drink_name='Drink Type'))
    revenue_timeline_callback_fig.update_xaxes(rangeslider_visible=False)  # We have the code, but this places a slider
    revenue_timeline_callback_fig.update_layout(transition_duration=500)  # Responsiveness of the slider

    # Recreate Order Pie figure based on callback
    order_pie_callback_fig = px.pie(join_callback_df, values='drink_price', names='drink_name',
                                    title='Drink Contribution to Revenue')

    # Recreate Bartender Revenue figure based on callback
    bartender_revenue_callback_fig = px.area(join_callback_df, x='order_date', y='drink_price', color='bartender_name',
                                             labels=dict(order_date='Order Date', drink_price='Revenue',
                                                         bartender_name='Bartender'))

    # Return function must be in order of the Outputs in the callback decorator,
    # these will render in the corresponding Divs
    return revenue_timeline_callback_fig, order_pie_callback_fig, bartender_revenue_callback_fig


# Run the application in debug mode for automatic updating
if __name__ == '__main__':
    app.run_server(debug=True)
