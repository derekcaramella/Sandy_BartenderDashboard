# Import necessary modules
import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.express as px
import pandas as pd

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']  # External styler, can change but don't need to
restaurant_name = 'Beach Side Bar'  # restaurant name to be posted
app = dash.Dash(__name__, external_stylesheets=external_stylesheets,
                update_title=restaurant_name + 'Management')  # set up the application

# https://www.tasteofhome.com/collection/easy-mixed-drinks/
# Create a few dataframes for experimenting, will need to make this sql for launch
order_df = pd.DataFrame({
    'order_id': ['00001', '00002', '00003', '00004', '00005', '00006', '00007', '00008', '00009'],
    'drink_name': ['Red Sangria', 'French 75', 'French 75', 'French 75', 'Chocolate Martini', 'Moscow Mule',
                   'Chocolate Martini',
                   'Spiked Lemonade', 'Bloody Mary'],
    'drink_price': [12, 11, 11, 13, 11, 10, 11, 8, 10],
    'order_date': ['1/1/2021', '1/1/2021', '1/1/2021', '1/1/2021', '1/15/2021', '1/31/2021', '2/1/2021', '2/15/2021',
                   '2/29/2021']
})
completed_orders_df = pd.DataFrame({
    'order_id': ['00001', '00002', '00003', '00004', '00005', '00006', '00007', '00008', '00009'],
    'bartender_name': ['Derek', 'Derek', 'Lisa', 'Tapan', 'Derek', 'Derek', 'Lisa', 'Tapan', 'Lisa']
})
join_df = pd.merge(order_df, completed_orders_df)  # Join dfs so I can get bartender profit

# A range slider does not work with dates only numbers, so we create a list of the unique dates so we have numbers
range_slider_number_date = [x for x in range(len(order_df['order_date'].unique()))]

# Timeline stacked bar graph of drink revenue based on the date
revenue_timeline_fig = px.bar(order_df, x='order_date', y='drink_price', color='drink_name', title='Revenue',
                              labels=dict(order_date='Order Date', drink_price='Revenue', drink_name='Drink Type'))
revenue_timeline_fig.update_xaxes(rangeslider_visible=False)  # We have the code, but this places a slider
revenue_timeline_fig.update_layout(transition_duration=500)  # Responsiveness of the slider

# Pie graph of the contribution of the specific drink to the total revenue
order_pie_fig = px.pie(order_df, values='drink_price', names='drink_name', title='Drink Contribution to Revenue')

# Stack line graph that shows the amount of revenue generated by each bartender BROKEN
bartender_revenue_fig = px.area(join_df, x='order_date', y='drink_price', color='bartender_name',
                                labels=dict(order_date='Order Date', drink_price='Revenue', bartender_name='Bartender'))

# layout the application, each div has children
app.layout = html.Div(children=[
    html.H1(children=restaurant_name),  # Display the restaurant names in H1 markdown

    # Date Range slider
    html.Div(children=[
        dcc.RangeSlider(id='date-range-slider',  # id for callback
                        min=range_slider_number_date[0],  # the first date
                        max=range_slider_number_date[-1],  # the last date
                        value=[range_slider_number_date[0], range_slider_number_date[-1]],  # From first to last
                        # a dictionary that displays the date to the number generated above
                        marks={number_date: date for number_date, date in
                               zip(range_slider_number_date, order_df['order_date'].unique())})
    ]),
    # Drinks dropdown menu for callback

    html.Div(children=
             dcc.Dropdown(id='drinks-dropdown',  # id for callback
                          # We want to make this dynamic, so we create dictionary using a for loop. We need the df
                          # in dictionary form with the duplicates removed
                          options=[{'label': i['drink_name'], 'value': i['drink_name']} for i in
                                   order_df.drop_duplicates('drink_name').to_dict('records')],
                          multi=True,  # Enable multiple selection
                          placeholder='Filter by drink',  # Prompt
                          style={'padding': '5px 10px'})  # Layout padding for good spacing
             ),

    html.Div(children=
             dcc.Dropdown(id='bartender-dropdown',  # id for callback
                          # We want to make this dynamic, so we create dictionary using a for loop. We need the df
                          # in dictionary form with the duplicates removed
                          options=[{'label': i['bartender_name'], 'value': i['bartender_name']} for i in
                                   completed_orders_df.drop_duplicates('bartender_name').to_dict('records')],
                          multi=True,  # Enable multiple selection
                          placeholder='Filter by bartender',  # Prompt
                          style={'padding': '5px 10px'})  # Layout padding for good spacing
             ),

    # The revenue generated by drink time-series & revenue contribution pie graph div. These will be on the same line
    html.Div(children=[
        dcc.Graph(id='revenue-timeline-fig',  # id for callback
                  figure=revenue_timeline_fig,  # See figure above
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'}),  # Layout styling
        dcc.Graph(id='order-pie-fig',  # id for callback
                  figure=order_pie_fig,  # See figure above
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'})  # Layout styling
    ]),

    # Stacked line graph of bartender revenue
    html.Div(children=[
        dcc.Graph(id='bartender-revenue-fig',  # id for callback
                  figure=bartender_revenue_fig,  # See figure above
                  style={'width': '50%', 'display': 'inline-block', 'padding': '0px 10px'})  # Layout styling
        # dcc.Graph(id='order-pie-fig', figure=order_pie_fig,
        #           style={'width': '32%', 'display': 'inline-block', 'padding': '0px 10px'})
    ])
])


# We need to work on the callbacks to the graphs, should be easy but want to set all graphs up first
@app.callback(
    [dash.dependencies.Input('demo-dropdown', 'value')])
def update_output(value):
    print(value)
    return value


# Run the application in debug mode for automatic updating
if __name__ == '__main__':
    app.run_server(debug=True)
