# Import necessary modules
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
from dash.exceptions import PreventUpdate
import plotly.express as px
import pandas as pd
import ssh_tunnel
import ast

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']  # External styler, can change but don't need to
restaurant_name = 'Sandy'  # restaurant name to be posted
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)  # set up the application
app.title = str(restaurant_name + ' Dashboard')  # Set Tab title

# https://www.tasteofhome.com/collection/easy-mixed-drinks/
# Create a few dataframes for experimenting, will need to make this sql for launch
order_df = pd.DataFrame({
    'order_id': ['00001', '00002', '00003', '00004', '00005', '00006', '00007', '00008', '00009'],
    'drink_name': ['Red Sangria', 'French 75', 'French 75', 'French 75', 'Chocolate Martini', 'Moscow Mule',
                   'Chocolate Martini',
                   'Spiked Lemonade', 'Bloody Mary'],
    'drink_price': [12, 11, 11, 13, 11, 10, 11, 8, 10],
    'order_date': ['1/1/2021', '1/1/2021', '1/1/2021', '1/1/2021', '1/15/2021', '1/31/2021', '2/1/2021', '2/15/2021',
                   '2/29/2021']
})
completed_orders_df = pd.DataFrame({
    'order_id': ['00001', '00002', '00003', '00004', '00005', '00006', '00007', '00008', '00009'],
    'bartender_name': ['Derek', 'Derek', 'Lisa', 'Tapan', 'Derek', 'Derek', 'Lisa', 'Tapan', 'Lisa']
})
# Unnecessary dataframe, will be removed
lag_time_orders = pd.read_csv('LagTimes.csv')

join_df = pd.merge(order_df, completed_orders_df)  # Join dfs so I can get bartender profit

# A range slider does not work with dates only numbers, so we create a list of the unique dates so we have numbers
range_slider_number_date = [x for x in range(len(order_df['order_date'].unique()))]
# A dictionary that displays the date to the number generated above
range_slider_dict = {number_date: date for number_date, date in
                     zip(range_slider_number_date, order_df['order_date'].unique())}

"""
Dropdown Options List follow this format:
[{'label': 'New York City', 'value': 'NYC'},
{'label': 'Montreal', 'value': 'MTL'},
{'label': 'San Francisco', 'value': 'SF'}]
"""
# List comprehension for drink & bartender dropdown options. The label & value are the same & we drop duplicates
drinks_options_dict = [{'label': i['drink_name'], 'value': i['drink_name']} for
                       i in order_df.drop_duplicates('drink_name').to_dict('records')]
bartender_options_dict = [{'label': i['bartender_name'], 'value': i['bartender_name']} for i in
                          completed_orders_df.drop_duplicates('bartender_name').to_dict('records')]

# Timeline stacked bar graph of drink revenue based on the date, joined dataframe for callback by bartender
revenue_timeline_fig = px.bar(join_df, x='order_date', y='drink_price', color='drink_name', title='Revenue',
                              labels=dict(order_date='Order Date', drink_price='Revenue', drink_name='Drink Type'))
revenue_timeline_fig.update_xaxes(rangeslider_visible=False)  # We have the code, but this places a slider
revenue_timeline_fig.update_layout(transition_duration=500)  # Responsiveness of the slider

# Pie graph of the contribution of the specific drink to the total revenue, joined dataframe for callback by bartender
order_pie_fig = px.pie(join_df, values='drink_price', names='drink_name', title='Drink Contribution to Revenue')

# Stack line graph that shows the amount of revenue generated by each bartender, joined dataframe for callback by drink
bartender_revenue_fig = px.area(join_df, x='order_date', y='drink_price', color='bartender_name',
                                title='Bartender Completed Orders',
                                labels=dict(order_date='Order Date', drink_price='Revenue', bartender_name='Bartender'))
bartender_order_completion_fig = px.histogram(lag_time_orders, x='order_lag_time', color='bartender_name',
                                              histnorm='probability density', marginal='violin',
                                              title='Bartender Order Completion Time',
                                              labels=dict(bartender_name='Bartender',
                                                          order_lag_time='Time Lag (minutes)',
                                                          probability_density='a'))  # Can some try to fix this?

# layout the application, each div has children
app.layout = html.Div(children=[
    html.H1(id='restaurant_name', children=restaurant_name),  # Display the restaurant names in H1 markdown

    html.Div(children=[
        dcc.ConfirmDialog(
            id='value-added-drinks-error-create-drink',
            message='Please, enter the correct value added drinks format. There should be only integers & a '
                    'comma to separate drink amounts per value added drink. Additionally, ensure you have the same '
                    'number of quantities (mL) and number of prices per bottle ($) to match the number of value '
                    'added drinks.'),
        dcc.ConfirmDialog(
            id='number-type-error-create-drink',
            message='Please, ensure you entered numeric information.'),
        dcc.ConfirmDialog(
            id='number-type-error-create-value-added-drink',
            message='Please, ensure you entered numeric information.'),
        dcc.ConfirmDialog(
            id='complete-all-information-error-create-drink',
            message='Please, complete user form.'),
        dcc.ConfirmDialog(
            id='complete-all-information-error-create-bartender',
            message='Please, complete user form.'),
        dcc.ConfirmDialog(
            id='complete-all-information-error-create-value-added-drink',
            message='Please, complete user form.'),
        dcc.ConfirmDialog(
            id='complete-all-information-error-delete-drink',
            message='Please, complete user form.'),
        dcc.ConfirmDialog(
            id='complete-all-information-error-delete-bartender',
            message='Please, complete user form.'),
        dcc.ConfirmDialog(
            id='complete-all-information-error-delete-value-added-drink',
            message='Please, complete user form.'),
    ]),

    # Date Range slider
    html.Div(children=[
        dcc.RangeSlider(id='date-range-slider',  # id for callback
                        min=range_slider_number_date[0],  # the first date
                        max=range_slider_number_date[-1],  # the last date
                        value=[range_slider_number_date[0], range_slider_number_date[-1]],  # From first to last
                        marks=range_slider_dict),
    ]),

    # Drinks dropdown menu for callback
    html.Div(children=
             dcc.Dropdown(id='drinks-dropdown',  # id for callback
                          options=drinks_options_dict,  # List dictionary for options
                          multi=True,  # Enable multiple selection
                          value=order_df['drink_name'].unique(),  # All the unique instances in the df for first load
                          placeholder='Filter by drink',  # Prompt
                          style={'padding': '5px 10px'})  # Layout padding for good spacing
             ),

    # Bartender dropdown menu for callback
    html.Div(children=
             dcc.Dropdown(id='bartender-dropdown',  # id for callback
                          options=bartender_options_dict,
                          multi=True,  # Enable multiple selection
                          # All the unique instances in the df for first load
                          value=completed_orders_df['bartender_name'].unique(),
                          placeholder='Filter by bartender',  # Prompt
                          style={'padding': '5px 10px'})  # Layout padding for good spacing
             ),

    # Date Aggregator menu for callback
    html.Div(children=
             dcc.Dropdown(id='date-aggregate-dropdown',  # id for callback
                          options=[
                              {'label': 'Hours', 'value': 'hour'},
                              {'label': 'Days', 'value': 'day'},
                              {'label': 'Weeks', 'value': 'week'},
                              {'label': 'Months', 'value': 'month'},
                              {'label': 'Quarters', 'value': 'quarter'}],
                          multi=False,  # Disable multiple selection
                          placeholder='Aggregate Time Series',  # Prompt
                          style={'padding': '5px 10px'})  # Layout padding for good spacing
             ),

    # The revenue generated by drink time-series & revenue contribution pie graph div. These will be on the same line
    html.Div(children=[
        dcc.Graph(id='revenue-timeline-fig',  # id for callback
                  figure=revenue_timeline_fig,  # See figure above
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'}),  # Layout styling
        dcc.Graph(id='order-pie-fig',  # id for callback
                  figure=order_pie_fig,  # See figure above
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'})  # Layout styling
    ]),

    # Stacked line graph of bartender revenue
    html.Div(children=[
        dcc.Graph(id='bartender-revenue-fig',  # id for callback
                  figure=bartender_revenue_fig,  # See figure above
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'}),  # Layout styling
        dcc.Graph(id='bartender-order-completion-fig', figure=bartender_order_completion_fig,
                  style={'width': '48%', 'display': 'inline-block', 'padding': '0px 10px'})
    ]),

    html.Div(children=[
        html.Div(children=[
            html.Div(children=[
                html.H4(id='create-drink-userform-title', children='Create Drink'),  # Create Drink User Form Title
                dcc.Input(id='create-drink-userform-drink-name', placeholder='Enter Drink Name', value='', style={'width': '75%'}),
                html.Br(),
                dcc.Dropdown(id='create-drink-userform-value-added-drinks',  # id for callback
                             options=bartender_options_dict,
                             multi=True,  # Enable multiple selection
                             # All the unique instances in the df for first load
                             value=completed_orders_df['bartender_name'].unique(),
                             placeholder='Value Added Drinks'),  # Prompt
                dcc.Input(id='create-drink-userform-value-added-quantities', placeholder='Enter Value Added Drink Amounts',
                          value='', style={'width': '75%'}),
                html.Br(),
                html.Button(children='Create Drink', id='create-drink-userform-submit-entry')],
                style={'width': '30%', 'padding': '0px 10px', 'vertical-align': 'top', 'display': 'inline-block'}),
            # Layout styling

            html.Div(children=[
                html.H4(id='create-bartender-userform-title', children='Create Bartender'),  # Create Drink User Form Title
                dcc.Input(id='create-bartender-userform-bartender-first-name', placeholder='Enter Bartender First Name',
                          value='', style={'width': '75%'}),
                html.Br(),
                dcc.Input(id='create-bartender-userform-bartender-last-name', placeholder='Enter Bartender Last Name',
                          value='', style={'width': '75%'}),
                html.Br(),
                dcc.Dropdown(id='create-bartender-userform-employment-type',  # id for callback
                             options=[
                                 {'label': 'Part Time', 'value': 'Part Time'},
                                 {'label': 'Full Time', 'value': 'Full Time'}],
                             multi=False,  # Disable multiple selection
                             placeholder='Employment Type'),  # Prompt
                dcc.Input(id='create-drink-userform-price', placeholder='Enter Drink Price ($)',
                          value='', style={'width': '75%'}),
                html.Br(),
                html.Button(children='Create Bartender', id='create-bartender-userform-submit-entry')],
                style={'width': '30%', 'padding': '0px 10px', 'vertical-align': 'top', 'display': 'inline-block'}),

            html.Div(children=[
                html.H4(id='create-value-added-drink-userform-title', children='Create Value Added Drink'),
                dcc.Input(id='create-value-added-drink-userform-drink-name', placeholder='Enter Value Added Drink Name',
                          value='', style={'width': '75%'}),
                html.Br(),
                dcc.Input(id='create-value-added-drink-userform-drink-bottle-size',
                          placeholder='Enter Value Added Bottle Size (oz.)', value='', style={'width': '75%'}),
                html.Br(),
                dcc.Input(id='create-value-added-drink-userform-drink-bottle-price',
                          placeholder='Enter Value Added Price ($)', value='', style={'width': '75%'}),
                html.Br(),
                html.Button(children='Create Value Added Drink', id='create-value-added-drink-userform-submit-entry')],
                style={'width': '30%', 'padding': '0px 5px', 'vertical-align': 'top', 'display': 'inline-block'})
        ]),
        html.Div(children=[
            html.Div(children=[
                html.H4(id='delete-drink-userform-title', children='Delete Drink'),
                dcc.Dropdown(id='delete-drink-userform-drink-name',  # id for callback
                             options=drinks_options_dict,
                             multi=False,  # Enable multiple selection
                             # All the unique instances in the df for first load
                             value='',
                             placeholder='Drink Name'),  # Prompt
                html.Br(),
                html.Button(children='Delete Drink', id='delete-drink-userform-submit-entry')],
                style={'width': '30%', 'padding': '0px 5px', 'vertical-align': 'top', 'display': 'inline-block'}),

            html.Div(children=[
                html.H4(id='delete-bartender-userform-title', children='Delete Bartender'),
                dcc.Dropdown(id='delete-drink-userform-bartender-name',  # id for callback
                             options=bartender_options_dict,
                             multi=False,  # Enable multiple selection
                             # All the unique instances in the df for first load
                             value='',
                             placeholder='Bartender Full Name'),  # Prompt
                html.Br(),
                html.Button(children='Delete Bartender', id='delete-bartender-userform-submit-entry')],
                style={'width': '30%', 'padding': '0px 5px', 'vertical-align': 'top', 'display': 'inline-block'}),

            html.Div(children=[
                html.H4(id='delete-value-added-drink-userform-title', children='Delete Value Added Drink'),
                dcc.Dropdown(id='delete-value-added-drink-userform-name',  # id for callback
                             options=bartender_options_dict,
                             multi=False,  # Enable multiple selection
                             # All the unique instances in the df for first load
                             value='',
                             placeholder='Value Added Drink Name'),  # Prompt
                html.Br(),
                html.Button(children='Delete Value Added Drink', id='delete-value-added-drink-userform-submit-entry')],
                style={'width': '30%', 'padding': '0px 5px', 'vertical-align': 'top', 'display': 'inline-block'})
        ])

        # Layout styling
    ], style={'width': '100%', 'display': 'inline-block'})

])

create_drinks_n_of_clicks = 0
create_bartender_n_of_clicks = 0
create_value_added_n_of_clicks = 0
delete_drink_n_of_clicks = 0
delete_bartender_n_of_clicks = 0
delete_value_added_n_of_clicks = 0


# Callbacks are order sensitive, the order matters when inputting parameters into the output function
@app.callback(
    Output('revenue-timeline-fig', 'figure'),  # First return from function is the revenue timeline
    Output('order-pie-fig', 'figure'),  # Second return from function is the order pie figure
    Output('bartender-revenue-fig', 'figure'),  # Third return from function is the bartender revenue figure
    # We convert these inputs to lists because they are multi input options, if was a single it doesn't need to be list
    [Input('date-range-slider', 'value')],  # First parameter into function is the date range slider
    [Input('drinks-dropdown', 'value')],  # Second parameter into function is the drinks dropdown
    [Input('bartender-dropdown', 'value')],  # Third parameter into function is the bartender dropdown
)
def update_figures(range_slider, drinks_dropdown, bartender_dropdown):
    # Filter date in between the range slider. The range slider will return the integers corresponding to the date
    # markers. We will use the range slider dictionary to look up the integer key, & pass the first date, then
    # second date
    callback_df = order_df[(order_df['order_date'] >= range_slider_dict[range_slider[0]]) &
                           (order_df['order_date'] <= range_slider_dict[range_slider[1]])]
    callback_df = callback_df[callback_df['drink_name'].isin(drinks_dropdown)]  # Filter by drink names

    # Filter by bartender names
    completed_orders_callback_df = completed_orders_df[completed_orders_df['bartender_name'].isin(bartender_dropdown)]
    join_callback_df = pd.merge(callback_df, completed_orders_callback_df)  # Join dfs so I can create dynamic figures

    # Recreate Revenue timeline figure based on callback
    revenue_timeline_callback_fig = px.bar(join_callback_df, x='order_date', y='drink_price', color='drink_name',
                                           title='Revenue', labels=dict(order_date='Order Date', drink_price='Revenue',
                                                                        drink_name='Drink Type'))
    revenue_timeline_callback_fig.update_xaxes(rangeslider_visible=False)  # We have the code, but this places a slider
    revenue_timeline_callback_fig.update_layout(transition_duration=500)  # Responsiveness of the slider

    # Recreate Order Pie figure based on callback
    order_pie_callback_fig = px.pie(join_callback_df, values='drink_price', names='drink_name',
                                    title='Drink Contribution to Revenue')

    # Recreate Bartender Revenue figure based on callback
    bartender_revenue_callback_fig = px.area(join_callback_df, x='order_date', y='drink_price', color='bartender_name',
                                             labels=dict(order_date='Order Date', drink_price='Revenue',
                                                         bartender_name='Bartender'))

    # Return function must be in order of the Outputs in the callback decorator,
    # these will render in the corresponding Divs
    return revenue_timeline_callback_fig, order_pie_callback_fig, bartender_revenue_callback_fig


@app.callback(
    Output('value-added-drinks-error-create-drink', 'displayed'),
    Output('number-type-error-create-drink', 'displayed'),
    Output('complete-all-information-error-create-drink', 'displayed'),
    Output('create-drink-userform-drink-name', 'value'),
    Output('create-drink-userform-value-added-drinks', 'value'),
    Output('create-drink-userform-value-added-quantities', 'value'),
    Output('create-drink-userform-price', 'value'),
    Input('create-drink-userform-drink-name', 'value'),
    [Input('create-drink-userform-value-added-drinks', 'value')],
    Input('create-drink-userform-value-added-quantities', 'value'),
    Input('create-drink-userform-price', 'value'),
    Input('create-drink-userform-submit-entry', 'n_clicks')

)
def create_drink_user_form(drink_name, value_added_drinks, value_added_drinks_quantities, drink_price,
                           create_drink_clicks):
    global create_drinks_n_of_clicks

    if create_drink_clicks is not None and create_drink_clicks > create_drinks_n_of_clicks:
        if drink_name == '' or value_added_drinks == [] or value_added_drinks_quantities == '':
            create_drinks_n_of_clicks += 1
            return False, False, True, dash.no_update, dash.no_update, dash.no_update, dash.no_update
        for quantity in value_added_drinks_quantities.split(','):
            try:
                float(quantity)
            except ValueError:
                create_drinks_n_of_clicks += 1
                return False, True, False, dash.no_update, dash.no_update, dash.no_update, dash.no_update
        value_added_drinks_quantities = ast.literal_eval('[' + value_added_drinks_quantities + ']')

        if len(value_added_drinks_quantities) != len(value_added_drinks):
            create_drinks_n_of_clicks += 1
            return True, False, False, dash.no_update, dash.no_update, dash.no_update, dash.no_update
        try:
            drink_price = float(drink_price)
        except ValueError:
            create_drinks_n_of_clicks += 1
            return False, True, False, dash.no_update, dash.no_update, dash.no_update, dash.no_update

        create_drinks_n_of_clicks += 1
        return False, False, False, '', [], '', ''
    else:
        raise PreventUpdate


@app.callback(
    Output('complete-all-information-error-create-bartender', 'displayed'),
    Output('create-bartender-userform-bartender-first-name', 'value'),
    Output('create-bartender-userform-bartender-last-name', 'value'),
    Output('create-bartender-userform-employment-type', 'value'),
    Input('create-bartender-userform-bartender-first-name', 'value'),
    Input('create-bartender-userform-bartender-last-name', 'value'),
    Input('create-bartender-userform-employment-type', 'value'),
    Input('create-bartender-userform-submit-entry', 'n_clicks')

)
def create_bartender_user_form(bartender_first_name, bartender_last_name, bartender_employment_type,
                               create_bartender_clicks):
    global create_bartender_n_of_clicks

    if create_bartender_clicks is not None and create_bartender_clicks > create_bartender_n_of_clicks:
        if bartender_first_name == '' or bartender_last_name == [] or bartender_employment_type == '':
            create_bartender_n_of_clicks += 1
            return True, dash.no_update, dash.no_update, dash.no_update

        create_bartender_n_of_clicks += 1
        return False, '', '', ''
    else:
        raise PreventUpdate


@app.callback(
    Output('complete-all-information-error-create-value-added-drink', 'displayed'),
    Output('number-type-error-create-value-added-drink', 'displayed'),
    Output('create-value-added-drink-userform-drink-name', 'value'),
    Output('create-value-added-drink-userform-drink-bottle-size', 'value'),
    Output('create-value-added-drink-userform-drink-bottle-price', 'value'),
    Input('create-value-added-drink-userform-drink-name', 'value'),
    Input('create-value-added-drink-userform-drink-bottle-size', 'value'),
    Input('create-value-added-drink-userform-drink-bottle-price', 'value'),
    Input('create-value-added-drink-userform-submit-entry', 'n_clicks')
)
def create_value_added_drink_user_form(value_added_drink_name, value_added_bottle_size, value_added_bottle_price,
                                       create_value_added_clicks):
    global create_value_added_n_of_clicks

    if create_value_added_clicks is not None and create_value_added_clicks > create_value_added_n_of_clicks:
        if value_added_drink_name == '' or value_added_bottle_size == '' or value_added_bottle_price == '':
            create_value_added_n_of_clicks += 1
            return True, False, dash.no_update, dash.no_update, dash.no_update

        try:
            value_added_bottle_size = float(value_added_bottle_size)
            value_added_bottle_price = float(value_added_bottle_price)
        except ValueError:
            create_value_added_n_of_clicks += 1
            return True, False, dash.no_update, dash.no_update, dash.no_update

        create_value_added_n_of_clicks += 1
        return False, False, '', '', ''
    else:
        raise PreventUpdate


@app.callback(
    Output('complete-all-information-error-delete-drink', 'displayed'),
    Output('delete-drink-userform-drink-name', 'value'),
    Input('delete-drink-userform-drink-name', 'value'),
    Input('delete-drink-userform-submit-entry', 'n_clicks')
)
def create_value_added_drink_user_form(drink_name, delete_drink_clicks):
    global delete_drink_n_of_clicks

    if delete_drink_clicks is not None and delete_drink_clicks > delete_drink_n_of_clicks:
        if drink_name == '':
            delete_drink_n_of_clicks += 1
            return True, dash.no_update

        delete_drink_n_of_clicks += 1
        return True, ''
    else:
        raise PreventUpdate


@app.callback(
    Output('complete-all-information-error-delete-bartender', 'displayed'),
    Output('delete-drink-userform-bartender-name', 'value'),
    Input('delete-drink-userform-bartender-name', 'value'),
    Input('delete-bartender-userform-submit-entry', 'n_clicks')
)
def create_value_added_drink_user_form(drink_name, delete_drink_clicks):
    global delete_bartender_n_of_clicks

    if delete_drink_clicks is not None and delete_drink_clicks > delete_drink_n_of_clicks:
        if drink_name == '':
            delete_bartender_n_of_clicks += 1
            return True, dash.no_update

        delete_bartender_n_of_clicks += 1
        return True, ''
    else:
        raise PreventUpdate


@app.callback(
    Output('complete-all-information-error-delete-value-added-drink', 'displayed'),
    Output('delete-value-added-drink-userform-name', 'value'),
    Input('delete-value-added-drink-userform-name', 'value'),
    Input('delete-value-added-drink-userform-submit-entry', 'n_clicks')
)
def create_value_added_drink_user_form(value_added_drink_name, delete_value_added_drink_clicks):
    global delete_value_added_n_of_clicks

    if delete_value_added_drink_clicks is not None and delete_value_added_drink_clicks > delete_value_added_n_of_clicks:
        if value_added_drink_name == '':
            delete_value_added_n_of_clicks += 1
            return True, dash.no_update

        delete_value_added_n_of_clicks += 1
        return True, ''
    else:
        raise PreventUpdate


# Run the application in debug mode for automatic updating
if __name__ == '__main__':
    app.run_server(debug=True)
